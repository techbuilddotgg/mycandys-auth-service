name: Docker Image CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
#      - name: Get Latest Tag
#        id: get_tag
#        run: |
#          TAG=$(git describe --abbrev=0)
#          echo "TAG=$TAG" >> $GITHUB_ENV
#        continue-on-error: true
#
#      - name: Set Default Tag If Missing
#        if: steps.get_tag.outcome != 'success'
#        run: |
#          echo "TAG=v1.0.0" >> $GITHUB_ENV
#
#      - name: Docker Login
#        env:
#          DOCKER_USER: ${{secrets.DOCKER_USER}}
#          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
#        run: |
#          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD
#
#      - name: Docker Build
#        run: docker build . --file Dockerfile --tag ${{secrets.DOCKER_REPO}}/${{secrets.DOCKER_IMAGE}}:$TAG
#
#      - name: DockerHub Push
#        run: docker push ${{secrets.DOCKER_REPO}}/${{secrets.DOCKER_IMAGE}}:$TAG

      - name: Delete Portainer Container If Exists
        run: |
          response=$(curl -X DELETE \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{secrets.TOKEN}}" \
            https://${{secrets.PORTAINER_URI}}/api/endpoints/1/docker/containers/${{vars.CONTAINER_ID}}?force=true&v=0
          )
          
          http_code=$(echo "$response" | awk '{print $NF}')
          
          if [[ ! "$http_code" =~ ^2[0-9][0-9]$ ]]; then
            echo "HTTP response code is $http_code. Deployment failed."
            exit 1
          fi

      - name: Deploy to Portainer
        run: |
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{secrets.TOKEN}}" \
            -d '{
              "Image": "${{secrets.DOCKER_REPO}}/${{secrets.DOCKER_IMAGE}}:$TAG",
              "Env":[
                "APP_NAME=${{secrets.ENV_APP_NAME}}",
                "DATABASE_NAME=${{secrets.ENV_DATABASE_NAME}}",
                "DATABASE_URI=${{secrets.ENV_DATABASE_URI}}",
                "JWT_EXP=${{secrets.ENV_JWT_EXP}}",
                "JWT_REFRESH_EXP=${{secrets.ENV_JWT_REFRESH_EXP}}",
                "JWT_SECRET=${{secrets.ENV_JWT_SECRET}}",
                "PORT=${{secrets.ENV_PORT}}",
                "SPRING_PROFILE=${{secrets.ENV_SPRING_PROFILE}}",
                "SWAGGER_SERVER_URL=${{secrets.ENV_SWAGGER_SERVER_URL}}",
              ],
              "PortBindings":{
                "${{secrets.ENV_PORT}}/tcp":[
                  {"HostPort":"${{secrets.ENV_PORT}}"}
                ]
              },
              "Privileged": false,
              "PublishAllPorts": false,
              "NetworkMode": "${{secrets.PORTAINER_NETWORK}}",
              "name": "${{secrets.DOCKER_IMAGE}}-test"
            }' \
            https://${{secrets.PORTAINER_URI}}/api/endpoints/1/docker/containers/create